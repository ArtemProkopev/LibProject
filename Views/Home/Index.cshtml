<!-- Views/Home/Index.cshtml -->
@model IEnumerable<LibProject.Models.Domain.Book>
@{
    ViewData["Title"] = "–ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥";
}

<div class="container-fluid px-4">
    <!-- –ü–ª–∞–≤–∞—é—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞ -->
    <div class="floating-cart">
        <button class="btn btn-primary position-fixed end-0 top-50 me-4" type="button" data-bs-toggle="offcanvas" data-bs-target="#cartPanel">
            <i class="bi bi-cart3"></i>
            <span class="badge bg-danger cart-badge">0</span>
        </button>
    </div>

    <!-- Offcanvas –∫–æ—Ä–∑–∏–Ω–∞ -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="cartPanel">
        <div class="offcanvas-header bg-light">
            <h5 class="offcanvas-title">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
        </div>
        <div class="offcanvas-body p-3">
            <div class="list-group" id="cartItems">
                <!-- –≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
            </div>
            <div class="d-grid mt-3">
                <button class="btn btn-success" id="checkoutButton">–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</button>
            </div>
        </div>
    </div>

    <!-- –ì–µ—Ä–æ–π-—Å–µ–∫—Ü–∏—è -->
    <header class="hero-section bg-gradient-primary text-center py-5 mb-5">
        <div class="container">
            <h1 class="display-4 fw-bold text-white mb-3">üìö –ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥</h1>
            <p class="lead text-light mb-4">–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–∏—Ä –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π</p>
            
            <!-- –ü–æ–∏—Å–∫ —Å –∏–∫–æ–Ω–∫–æ–π -->
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="input-group input-group-lg shadow">
                        <span class="input-group-text bg-white border-0">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-0" id="searchInput" placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞–≤—Ç–æ—Ä—É –∏–ª–∏ –∂–∞–Ω—Ä—É">
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
    <main class="container">
        <div class="row g-4">
            <!-- –§–∏–ª—å—Ç—Ä—ã -->
            <aside class="col-lg-3">
                <div class="card shadow-sm sticky-top" style="top: 20px;">
                    <div class="card-header bg-primary text-white py-3">
                        <h5 class="mb-0"><i class="bi bi-funnel"></i> –§–∏–ª—å—Ç—Ä—ã</h5>
                    </div>
                    <div class="card-body">
                        <!-- –ê–∫–∫–æ—Ä–¥–µ–æ–Ω —Ñ–∏–ª—å—Ç—Ä–æ–≤ -->
                        <div class="accordion" id="filterAccordion">
                            <!-- –ñ–∞–Ω—Ä—ã -->
                            <div class="accordion-item">
                                <h6 class="accordion-header">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#genreFilters">
                                        –ñ–∞–Ω—Ä—ã
                                    </button>
                                </h6>
                                <div id="genreFilters" class="accordion-collapse collapse show">
                                    <div class="accordion-body">
                                        @foreach (var genre in ViewBag.Genres)
                                        {
                                            <div class="form-check">
                                                <input class="form-check-input genre-filter" 
                                                       type="checkbox" 
                                                       value="@genre.Id" 
                                                       id="genre-@genre.Id">
                                                <label class="form-check-label" for="genre-@genre.Id">
                                                    @genre.Name
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è -->
                            <div class="accordion-item">
                                <h6 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#yearFilters">
                                        –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è
                                    </button>
                                </h6>
                                <div id="yearFilters" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="yearBefore1900">
                                            <label class="form-check-label" for="yearBefore1900">–î–æ 1900</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="yearAfter1900">
                                            <label class="form-check-label" for="yearAfter1900">–ü–æ—Å–ª–µ 1900</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </aside>

            <!-- –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ -->
            <section class="col-lg-9">
                <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4" id="bookList">
                    @foreach (var book in Model)
                    {
                        <div class="col">
                            <div class="card h-100 border-0 shadow-sm hover-effect">
                                <div class="position-relative">
                                    <img src="@book.ImageUrl" 
                                         class="card-img-top book-image" 
                                         alt="@book.Title">
                                    <div class="card-actions position-absolute top-0 end-0 p-2">
                                        <button class="btn btn-icon add-to-favorites" 
                                                data-book-id="@book.Id"
                                                data-bs-toggle="tooltip" 
                                                title="@(book.IsFavorite ? "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")">
                                            <i class="bi @(book.IsFavorite ? "bi-heart-fill text-danger" : "bi-heart") fs-5"></i>
                                        </button>
                                    </div>
                                    <div class="book-badge position-absolute start-0 bottom-0 m-2">
                                        <span class="badge @(book.IsAvailable ? "bg-success" : "bg-secondary")">
                                            @(book.IsAvailable ? "–í –Ω–∞–ª–∏—á–∏–∏" : "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")
                                        </span>
                                    </div>
                                </div>
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title fw-bold mb-3">@book.Title</h5>
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <span class="badge bg-primary">@book.Genre?.Name</span>
                                        <small class="text-muted">@book.Year</small>
                                    </div>
                                    <p class="card-text text-muted mb-4">@book.Author</p>
                                    
                                    <div class="mt-auto d-flex justify-content-between align-items-center">
                                        <div class="price">‚ÇΩ @book.Price.ToString("N0")</div>
                                        <button class="btn btn-primary add-to-cart" 
                                                data-book-id="@book.Id"
                                                @(book.IsAvailable ? "" : "disabled")>
                                            <i class="bi bi-cart-plus me-2"></i>–í –∫–æ—Ä–∑–∏–Ω—É
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </section>
        </div>
    </main>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–ª—Ç–∏–ø–æ–≤
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
        const updateCart = async () => {
            try {
                const response = await fetch('/Cart/GetCart');
                if (!response.ok) throw new Error('Network error');
                
                const data = await response.json();
                document.querySelector('.cart-badge').textContent = data.totalItems;
                
                const cartItemsHTML = data.items.map(item => `
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <h6>${item.title}</h6>
                            <small class="text-muted">${item.author} (${item.addedDate})</small>
                        </div>
                        <div>
                            <span class="me-3">‚ÇΩ${item.price}</span>
                            <button class="btn btn-sm btn-danger remove-from-cart" data-item-id="${item.id}">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                `).join('');
                
                document.getElementById('cartItems').innerHTML = cartItemsHTML;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error);
            }
        };

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
        document.querySelectorAll('.add-to-cart').forEach(btn => {
            btn.addEventListener('click', async function() {
                const bookId = this.dataset.bookId;
                try {
                    const response = await fetch(`/Cart/AddToCart?bookId=${bookId}`, {
                        method: 'POST'
                    });
                    
                    if (response.ok) {
                        await updateCart();
                        this.classList.add('added');
                        setTimeout(() => this.classList.remove('added'), 500);
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞:', error);
                }
            });
        });

        // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
        document.querySelectorAll('.add-to-favorites').forEach(btn => {
            btn.addEventListener('click', async function() {
                const bookId = this.dataset.bookId;
                const icon = this.querySelector('i');
                
                try {
                    const response = await fetch(`/Favorites/ToggleFavorite?bookId=${bookId}`, {
                        method: 'POST'
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        icon.classList.toggle('bi-heart-fill', result.isFavorite);
                        icon.classList.toggle('bi-heart', !result.isFavorite);
                        icon.classList.toggle('text-danger', result.isFavorite);
                        
                        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
                        this.setAttribute('title', result.isFavorite ? 
                            "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
                        tooltipList.find(t => t._element === this).setContent({'.tooltip-inner': this.title});
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞:', error);
                }
            });
        });

        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        updateCart();
    });
</script>
}